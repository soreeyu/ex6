<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- AOP -->
	<!-- 공통 로직 -->
	<!-- <bean class="com.choa.aspect.CardCheck" id="cardCheck"/> -->
	
	
	<!-- <aop:config>
		<aop:aspect id="cardAspect" ref="cardCheck"> cardCheck가 aspect역할을 해줄 것이다 라고 정의
			
				.. : 하위의 모든 디렉터리
				*() : 하위의 모든 메서드
				(..) : 매개변수가 있든 없든 모든 것
			Transport 밑에 모든 메서드 ()는 매개변수 없는것 (..)는 매개변수가 몇개 있던 노상관
			
			<aop:pointcut expression="execution(* com.choa.aspect..Transport.*(..))" id="trans"/> experssion = 패턴을 가진 모든 것에 적용
			<aop:around method="check" pointcut-ref="trans" /> 전 후로 모두 사용 하기 위해 around
			
		</aop:aspect>
		
		<aop:aspect id="cardReserve" ref="cardCheck"> aop가 하나 더 있다면 하나 더사용 
			<aop:pointcut expression="execution(* com.choa.aspect..Trip.*(..))" id="trip"/>
			<aop:before method="reservation" pointcut-ref="trip"/>  전에만 사용 하기 위해 before
		</aop:aspect> 
	</aop:config> -->
	
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- 디비를 property를 이용해서 아무나 내 디비 정보를 알 수 없게 하기 위해 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" id="propertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:mybatis/myBatis.properties</value>
		</property>
	</bean>
	
	
	
	<!-- datasource -->
		<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.pw}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="driverClassName" value="${jdbc.driver}"/>
		</bean>
		
	<!-- Mybatis -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml" />
		
		<!-- mybatis-config.xml 추가 시 작성 코드 -->
		<!-- <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>-->
	</bean>
	
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean" />
	</bean>
	
	<!-- Transaction -->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="txManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 2.Annotation 방법 -->
	<tx:annotation-driven transaction-manager="txManager"/> <!-- tx:Annotation 활성화 -->
	
	<!-- 1. XML 방법 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="txManager">		공통적인 것들
				<tx:attributes>
					<tx:method name="*" rollback-for="Exception"/>		Exception이 발생하면 롤백 하겟다
				</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.choa.table..TableService.*(..))" id="requiredTx"/>
		이패턴을 가진 모든 것들에게 해당됨
		<aop:advisor advice-ref="txAdvice" pointcut-ref="requiredTx"/>
		외부에 있는 advice를 불러와 사용 하겠다 & 어떤것들에게 적용시킬 것인지 연결
	</aop:config> -->
	
	<!-- Upload -->
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<property name="defaultEncoding" value="UTF-8"/>
	</bean>
	
	
	<context:component-scan base-package="com.choa.file">
	
	</context:component-scan>
	
	
		
		
</beans>
